# name: Basic CI/CD Pipeline

# # D√©clenchement sur push et pull request
# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# # Variables d'environnement globales
# env:
#   REGISTRY: ghcr.io
#   IMAGE_NAME: ${{ github.repository }}

# jobs:
#   # Job de base avec nom personnalis√©
#   build:
#     name: Build-NomPrenom-Organisme  # √Ä personnaliser par chaque √©tudiant
#     runs-on: ubuntu-latest
    
#     # Permissions minimales n√©cessaires
#     permissions:
#       contents: read
#       packages: write
    
#     # Outputs pour les jobs suivants
#     outputs:
#       image_name: ${{ steps.meta.outputs.tags }}
#       digest: ${{ steps.build.outputs.digest }}
#       image_uri: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    
#     steps:
#     # 1. Checkout du code source
#     - name: Checkout repository
#       uses: actions/checkout@v4
    
#     # 2. Configuration Docker Buildx (pour builds avanc√©s)
#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3
    
#     # 3. Authentification au GitHub Container Registry
#     - name: Login to Container Registry
#       uses: docker/login-action@v3
#       with:
#         registry: ${{ env.REGISTRY }}
#         username: ${{ github.actor }}
#         password: ${{ secrets.GITHUB_TOKEN }}  # Token automatique GitHub
    
#     # 4. Extraction des m√©tadonn√©es (tags, labels)
#     - name: Extract metadata
#       id: meta
#       uses: docker/metadata-action@v5
#       with:
#         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#         tags: |
#           type=ref,event=branch
#           type=ref,event=pr
#           type=sha,prefix={{branch}}-
#           type=raw,value=latest,enable={{is_default_branch}}
    
#     # 5. Build et push de l'image Docker
#     - name: Build and push Docker image
#       id: build
#       uses: docker/build-push-action@v5
#       with:
#         context: .
#         push: true
#         tags: ${{ steps.meta.outputs.tags }}
#         labels: ${{ steps.meta.outputs.labels }}
#         # Cache pour optimiser les builds suivants
#         cache-from: type=gha
#         cache-to: type=gha,mode=max
    
#     # 6. Affichage des informations de build
#     - name: Display build info
#       run: |
#         echo "‚úÖ Image construite avec succ√®s !"
#         echo "üì¶ Tags: ${{ steps.meta.outputs.tags }}"
#         echo "üîí Digest: ${{ steps.build.outputs.digest }}"
#         echo "üåê Registry: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"


# Pipeline de base compl√®te - Docker standard avec SHA et image priv√©e
name: Complete Basic CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  # secret_scan:
  #   name: TruffleHog Secret Scan
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     security-events: write
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0
        
  #   - name: Run TruffleHog to find secrets
  #     uses: trufflesecurity/trufflehog@main
  #     with:
  #       path: ./
  scan:
    name: secret scanning with gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:        
          continue-on-error: true  

  build:
    name: AMAATI-ZAKI  # √Ä personnaliser par chaque √©tudiant
    runs-on: ubuntu-latest
    
    # Permissions n√©cessaires
    permissions:
      contents: read
      packages: write
    
    # Outputs pour utilisation future (pr√™t pour SLSA plus tard)
    outputs:
      image_name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      digest: ${{ steps.build.outputs.digest }}
      image_uri: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
      tags: ${{ steps.meta.outputs.tags }}
    
    steps:
    # 1. R√©cup√©ration du code source
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # 2. Authentification au GitHub Container Registry
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    # 3. Configuration des m√©tadonn√©es avec SHA prioritaire
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # SHA en priorit√© pour immutabilit√© et s√©curit√©
          type=sha,prefix={{branch}}-,format=long,priority=1000
          type=sha,prefix={{branch}}-,format=short,priority=900
          # Tags traditionnels pour d√©veloppement
          type=ref,event=branch,priority=600
          type=ref,event=pr,priority=600
          type=raw,value=latest,enable={{is_default_branch}},priority=200
        labels: |
          org.opencontainers.image.title=${{ github.repository }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
          # üîí Configuration pour image priv√©e
          org.opencontainers.image.visibility=private
    
    # 4. Build et push de l'image Docker (sans Buildx)
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    # 5. Configuration de l'image comme priv√©e
    - name: Set image visibility to private
      run: |
        echo "üîí Configuration de l'image comme priv√©e..."
        # L'image sera priv√©e gr√¢ce au label dans les m√©tadonn√©es
        echo "Image sera automatiquement configur√©e comme priv√©e"
    
    # 6. Affichage des informations de build
    - name: Display complete build information
      run: |
        echo "üéâ === BUILD TERMIN√â AVEC SUCC√àS ==="
        echo ""
        echo "üì¶ Nom de l'image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "üîë SHA Digest: ${{ steps.build.outputs.digest }}"
        echo "üéØ URI compl√®te (immutable): ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}"
        echo ""
        echo "üè∑Ô∏è Tags disponibles:"
        echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | while read tag; do echo "  - $tag"; done
        echo ""
        echo "üîí Visibilit√©: Image priv√©e (authentification requise)"
        echo "‚ö° Recommandation: Utilisez le SHA digest pour la production"
        echo ""
        echo "üìã Commandes utiles:"
        echo "  - Pull: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}"
        echo "  - Inspect: docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}"
    
    # 7. Test rapide de l'image (optionnel)
    - name: Quick image test
      run: |
        echo "üß™ Test rapide de l'image construite..."
        docker images | grep ${{ github.repository }} || echo "Image locale non trouv√©e (normal apr√®s push)"
        echo "‚úÖ Build et push r√©ussis - image disponible sur ${{ env.REGISTRY }}"

