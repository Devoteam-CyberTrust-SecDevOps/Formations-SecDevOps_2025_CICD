    # # 4. Build et push de l'image Docker (sans Buildx)
    # - name: Build and push Docker image
    #   id: build
    #   uses: docker/build-push-action@v5
    #   with:
    #     context: .
    #     push: true
    #     tags: ${{ steps.meta.outputs.tags }}
    #     labels: ${{ steps.meta.outputs.labels }}

      # SCA-scan:
  #     name: Run OSV Scanner for SCA
  #     uses: google/osv-scanner-action/.github/workflows/osv-scanner-reusable-pr.yml@v2.2.2
  #     permissions:
  #       contents: read
  #       security-events: write
  #       actions: read
  #     with:
  #       # Paramètres du workflow réutilisable
  #       scan-args: |-
  #         --format=sarif
  #         --output=osv-scanner-report.sarif
  #         .
  #       upload-sarif: true

# Pipeline de base complète - Docker standard avec SHA et image privée#
name: Complete Basic CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:


  secret_scan:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run TruffleHog to find secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./

  secret-scaning:
    name: secret scanning with gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: gitleaks/gitleaks-action@v2
        with: 
            exit-code: 0  
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sast-scan:
    name: Semgrep SAST Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    container:
      image: semgrep/semgrep

    if: (github.actor != 'dependabot[bot]')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run Semgrep Scan
        run: semgrep scan --config auto --sarif --output semgrep.sarif || true

      - name: Upload Semgrep SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  SCA-scan:
    name: Run OSV Scanner for SCA
    uses: "google/osv-scanner-action/.github/workflows/osv-scanner-reusable.yml@v2.2.2"
    permissions:
      actions: read
      security-events: write
      contents: read
    with:
      scan-args: |-
        --recursive
        ./
      upload-sarif: true
      fail-on-vuln: false


# 1️⃣ JOB BUILD - Construction de l'image Docker
  build-image:
    name: 🔨 BUILD - Docker Image Construction
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      actions: read
    
    # Outputs pour les jobs suivants et SLSA
    outputs:
      image_name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      digest: ${{ steps.build.outputs.digest }}
      image_uri: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
      tags: ${{ steps.meta.outputs.tags }}
      tags_json: ${{ steps.meta.outputs.json }}
      
    steps:
      # 1. Récupération du code source
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # 2. Authentification au GitHub Container Registry
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # 3. Configuration des métadonnées avec SHA prioritaire
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # SHA en priorité pour immutabilité et sécurité
            type=sha,prefix={{branch}}-,format=long,priority=1000
            type=sha,prefix={{branch}}-,format=short,priority=900
            # Tags traditionnels pour développement
            type=ref,event=branch,priority=600
            type=ref,event=pr,priority=600
            type=raw,value=latest,enable={{is_default_branch}},priority=200
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            # 🔒 Configuration pour image privée
            org.opencontainers.image.visibility=private
  
      # 4. Build Docker image SEULEMENT (sans push)
      - name: Build Docker image locally
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false  # ✅ Pas de push dans ce job
          load: true   # ✅ Charge l'image localement pour le scan suivant
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      # 5. Sauvegarde de l'image pour le job suivant
      - name: Save Docker image as artifact
        run: |
          echo "💾 Sauvegarde de l'image pour le job de scan..."
          # Sauvegarder la première tag comme référence
          FIRST_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
          docker save "$FIRST_TAG" | gzip > docker-image.tar.gz
          echo "✅ Image sauvegardée: docker-image.tar.gz"
      
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ github.run_id }}
          path: docker-image.tar.gz
          retention-days: 1
  
      # 6. Affichage des informations de build
      - name: Display build information
        run: |
          echo "🎉 === BUILD TERMINÉ AVEC SUCCÈS ==="
          echo ""
          echo "📦 Nom de l'image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "🔑 Digest (temporaire): ${{ steps.build.outputs.digest }}"
          echo ""
          echo "🏷️ Tags préparés:"
          echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | while read tag; do echo "  - $tag"; done
          echo ""
          echo "➡️  Image prête pour scan de sécurité..."
  
  # 2️⃣ JOB SCAN - Scanner de sécurité des containers
  container-scan:
    name: 🔍 SCAN - Container Security Analysis  
    runs-on: ubuntu-latest
    needs: build-image
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    # Outputs pour le job push
    outputs:
      scan_status: ${{ steps.scan-status.outputs.status }}
      critical_count: ${{ steps.scan-status.outputs.critical }}
      high_count: ${{ steps.scan-status.outputs.high }}
      
    steps:
      # 1. Récupération du code (pour contexte)
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # 2. Téléchargement de l'image construite
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ github.run_id }}
      
      # 3. Chargement de l'image Docker
      - name: Load Docker image
        run: |
          echo "📥 Chargement de l'image Docker..."
          docker load < docker-image.tar.gz
          echo "✅ Image chargée avec succès"
          docker images
      
      # 4. Scanner Trivy sur l'image
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(needs.build-image.outputs.tags_json).tags[0] }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: 0  # Continue même si vulnérabilités
          severity: 'CRITICAL,HIGH'
        continue-on-error: true
      
      # 5. Upload des résultats vers GitHub Security
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
        continue-on-error: true 
  
      # 6. Analyse des résultats et création du statut
      - name: Analyze scan results
        id: scan-status
        run: |
          if [ -f trivy-results.sarif ]; then
            CRITICAL_COUNT=$(jq '[.runs[0].results[] | select(.level == "error")] | length' trivy-results.sarif 2>/dev/null || echo "0")
            HIGH_COUNT=$(jq '[.runs[0].results[] | select(.level == "warning")] | length' trivy-results.sarif 2>/dev/null || echo "0")
            
            echo "🔍 === RÉSULTATS DU SCAN DE SÉCURITÉ ==="
            echo "Critical vulnerabilities: $CRITICAL_COUNT"
            echo "High vulnerabilities: $HIGH_COUNT"
            
            # Outputs pour le job suivant
            echo "critical=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
            echo "high=$HIGH_COUNT" >> $GITHUB_OUTPUT
            
            if [ "$CRITICAL_COUNT" -gt "0" ]; then
              echo "status=critical_found" >> $GITHUB_OUTPUT
              echo "❌ Critical vulnerabilities found! Review before production deployment."
            else
              echo "status=safe" >> $GITHUB_OUTPUT
              echo "✅ No critical vulnerabilities found."
            fi
          else
            echo "status=scan_failed" >> $GITHUB_OUTPUT
            echo "⚠️ No scan results file found."
          fi
  
  # 3️⃣ JOB PUSH - Publication de l'image Docker  
  push-image:
    name: 🚀 PUSH - Docker Image Publication
    runs-on: ubuntu-latest
    needs: [build-image, container-scan]
    
    permissions:
      contents: read
      packages: write
      actions: read
    
    # Outputs finaux pour SLSA (reprend ceux du build)
    outputs:
      image_name: ${{ needs.build-image.outputs.image_name }}
      digest: ${{ steps.push.outputs.digest }}  # Digest réel après push
      image_uri: ${{ needs.build-image.outputs.image_name }}@${{ steps.push.outputs.digest }}
      tags: ${{ needs.build-image.outputs.tags }}
      
    steps:
      # 1. Récupération du code source
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # 2. Authentification au GitHub Container Registry
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # 3. Affichage du statut de scan
      - name: Display security scan status
        run: |
          echo "🔍 === STATUT DU SCAN DE SÉCURITÉ ==="
          echo "Statut: ${{ needs.container-scan.outputs.scan_status }}"
          echo "Vulnérabilités critiques: ${{ needs.container-scan.outputs.critical_count }}"
          echo "Vulnérabilités élevées: ${{ needs.container-scan.outputs.high_count }}"
          
          if [ "${{ needs.container-scan.outputs.scan_status }}" = "critical_found" ]; then
            echo "⚠️  Des vulnérabilités critiques ont été trouvées!"
            echo "📋 Consultez l'onglet Security > Code scanning pour les détails"
            # Décommentez la ligne suivante pour bloquer le push si vulnérabilités critiques
            # exit 1
          fi
      
      # 4. Reconstruction et Push (nécessaire pour obtenir le vrai digest)
      - name: Extract metadata (for push)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix={{branch}}-,format=long,priority=1000
            type=sha,prefix={{branch}}-,format=short,priority=900
            type=ref,event=branch,priority=600
            type=ref,event=pr,priority=600
            type=raw,value=latest,enable={{is_default_branch}},priority=200
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.visibility=private
      
      # 5. Build final et Push pour obtenir le digest définitif
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true  # ✅ Push final
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  
      # 6. Configuration de l'image comme privée
      - name: Set image visibility to private
        run: |
          echo "🔒 Configuration de l'image comme privée..."
          echo "Image sera automatiquement configurée comme privée"
      
      # 7. Affichage des informations finales
      - name: Display complete build information
        run: |
          echo "🎉 === PIPELINE TERMINÉ AVEC SUCCÈS ==="
          echo ""
          echo "📦 Nom de l'image: ${{ needs.build-image.outputs.image_name }}"
          echo "🔑 SHA Digest FINAL: ${{ steps.push.outputs.digest }}"
          echo "🎯 URI complète (immutable): ${{ needs.build-image.outputs.image_name }}@${{ steps.push.outputs.digest }}"
          echo ""
          echo "🏷️ Tags disponibles:"
          echo "${{ needs.build-image.outputs.tags }}" | tr ',' '\n' | while read tag; do echo "  - $tag"; done
          echo ""
          echo "🔒 Visibilité: Image privée (authentification requise)"
          echo "⚡ Recommandation: Utilisez le SHA digest pour la production"
          echo ""
          echo "🔍 Sécurité: ${{ needs.container-scan.outputs.critical_count }} critical, ${{ needs.container-scan.outputs.high_count }} high vulnerabilities"
          echo ""
          echo "📋 Commandes utiles:"
          echo "  - Pull: docker pull ${{ needs.build-image.outputs.image_name }}@${{ steps.push.outputs.digest }}"
          echo "  - Inspect: docker inspect ${{ needs.build-image.outputs.image_name }}@${{ steps.push.outputs.digest }}"
    
  iac-scan:
    name: IaC Scan with Checkov
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          output_format: cli,sarif
          output_file_path: console,results.sarif
          exit-code: 0  
          continue-on-error: true


      - name: Envoyer les résultats de Checkov à GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: results.sarif
          exit-code: 0  
          continue-on-error: true










          
  # build:
  #   name: AMAATI-ZAKI  # À personnaliser par chaque étudiant
  #   runs-on: ubuntu-latest
    
  #   # Permissions nécessaires
  #   permissions:
  #     contents: read
  #     packages: write
  #     security-events: write  
  #     actions: read          
  
    
  #   # Outputs pour utilisation future (prêt pour SLSA plus tard)
  #   outputs:
  #     image_name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #     digest: ${{ steps.build.outputs.digest }}
  #     image_uri: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
  #     tags: ${{ steps.meta.outputs.tags }}
    
  #   steps:
  #   # 1. Récupération du code source
  #   - name: Checkout repository
  #     uses: actions/checkout@v4
    
  #   # 2. Authentification au GitHub Container Registry
  #   - name: Login to Container Registry
  #     uses: docker/login-action@v3
  #     with:
  #       registry: ${{ env.REGISTRY }}
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}
    
  #   # 3. Configuration des métadonnées avec SHA prioritaire
  #   - name: Extract metadata
  #     id: meta
  #     uses: docker/metadata-action@v5
  #     with:
  #       images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #       tags: |
  #         # SHA en priorité pour immutabilité et sécurité
  #         type=sha,prefix={{branch}}-,format=long,priority=1000
  #         type=sha,prefix={{branch}}-,format=short,priority=900
  #         # Tags traditionnels pour développement
  #         type=ref,event=branch,priority=600
  #         type=ref,event=pr,priority=600
  #         type=raw,value=latest,enable={{is_default_branch}},priority=200
  #       labels: |
  #         org.opencontainers.image.title=${{ github.repository }}
  #         org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
  #         org.opencontainers.image.revision=${{ github.sha }}
  #         org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
  #         # 🔒 Configuration pour image privée
  #         org.opencontainers.image.visibility=private
    


  #       # 1. BUILD SEULEMENT (sans push)
  #   - name: Build Docker image
  #     id: build
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       push: false  
  #       load: true   
  #       tags: ${{ steps.meta.outputs.tags }}
  #       labels: ${{ steps.meta.outputs.labels }}
    
  #   # 2. SCANNER L'IMAGE
  #   - name: Run Trivy vulnerability scanner
  #     uses: aquasecurity/trivy-action@master
  #     with:
  #       image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
  #       format: 'sarif'
  #       output: 'trivy-results.sarif'
  #       exit-code: 0  
  #       severity: 'CRITICAL,HIGH'
    
  #   - name: Upload Trivy scan results to GitHub Security
  #     uses: github/codeql-action/upload-sarif@v3
  #     if: always()
  #     with:
  #       sarif_file: trivy-results.sarif
  #     continue-on-error: true 

  #         # 7. Vérification des vulnérabilités critiques (nouveau)
  #   - name: Check for critical vulnerabilities
  #     run: |
  #       if [ -f trivy-results.sarif ]; then
  #         CRITICAL_COUNT=$(jq '[.runs[0].results[] | select(.level == "error")] | length' trivy-results.sarif 2>/dev/null || echo "0")
  #         HIGH_COUNT=$(jq '[.runs[0].results[] | select(.level == "warning")] | length' trivy-results.sarif 2>/dev/null || echo "0")
          
  #         echo "🔍 Security scan results:"
  #         echo "Critical vulnerabilities: $CRITICAL_COUNT"
  #         echo "High vulnerabilities: $HIGH_COUNT"
          
  #         if [ "$CRITICAL_COUNT" -gt "0" ]; then
  #           echo "❌ Critical vulnerabilities found! Consider fixing before production deployment."
  #           # exit 1  # Décommentez pour bloquer en cas de vulnérabilités critiques
  #         else
  #           echo "✅ No critical vulnerabilities found."
  #         fi
  #       else
  #         echo "⚠️ No scan results file found."
  #       fi
  #   # 3. PUSH SEULEMENT SI SCAN RÉUSSI
  #   - name: Push Docker image
  #     if: success()  
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       push: true
  #       tags: ${{ steps.meta.outputs.tags }}
  #       labels: ${{ steps.meta.outputs.labels }}
    
  #   # 5. Configuration de l'image comme privée
  #   - name: Set image visibility to private
  #     run: |
  #       echo "🔒 Configuration de l'image comme privée..."
  #       # L'image sera privée grâce au label dans les métadonnées
  #       echo "Image sera automatiquement configurée comme privée"
    
  #   # 6. Affichage des informations de build
  #   - name: Display complete build information
  #     run: |
  #       echo "🎉 === BUILD TERMINÉ AVEC SUCCÈS ==="
  #       echo ""
  #       echo "📦 Nom de l'image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
  #       echo "🔑 SHA Digest: ${{ steps.build.outputs.digest }}"
  #       echo "🎯 URI complète (immutable): ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}"
  #       echo ""
  #       echo "🏷️ Tags disponibles:"
  #       echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | while read tag; do echo "  - $tag"; done
  #       echo ""
  #       echo "🔒 Visibilité: Image privée (authentification requise)"
  #       echo "⚡ Recommandation: Utilisez le SHA digest pour la production"
  #       echo ""
  #       echo "📋 Commandes utiles:"
  #       echo "  - Pull: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}"
  #       echo "  - Inspect: docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}"
    
  #   # 7. Test rapide de l'image (optionnel)
  #   - name: Quick image test
  #     run: |
  #       echo "🧪 Test rapide de l'image construite..."
  #       docker images | grep ${{ github.repository }} || echo "Image locale non trouvée (normal après push)"
  #       echo "✅ Build et push réussis - image disponible sur ${{ env.REGISTRY }}"
