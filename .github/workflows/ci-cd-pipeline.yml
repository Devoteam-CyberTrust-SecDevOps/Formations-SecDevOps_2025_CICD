# name: Basic CI/CD Pipeline

# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main ]

# env:
#   REGISTRY: ghcr.io
#   IMAGE_NAME: ${{ github.repository }}

# jobs:
# #  JOB BUILD - Construction de l'image Docker
#   build-image:
#     name:  Pr√©nom-Nom-Build - Docker Image Construction
#     runs-on: ubuntu-latest
    
#     permissions:
#       contents: read
#       packages: write
#       actions: read
    
#     # Outputs pour les jobs suivants et SLSA
#     outputs:
#       image_name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#       digest: ${{ steps.build.outputs.digest }}
#       image_uri: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
#       tags: ${{ steps.meta.outputs.tags }}
#       tags_json: ${{ steps.meta.outputs.json }}
      
#     steps:
#       # R√©cup√©ration du code source
#       - name: Checkout repository
#         uses: actions/checkout@v4
      
#       # Authentification au GitHub Container Registry
#       - name: Login to Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
      
#       # Configuration des m√©tadonn√©es avec SHA prioritaire
#       - name: Extract metadata
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#           tags: |
#             # SHA en priorit√© pour immutabilit√© et s√©curit√©
#             type=sha,prefix={{branch}}-,format=long,priority=1000
#             type=sha,prefix={{branch}}-,format=short,priority=900
#             # Tags traditionnels pour d√©veloppement
#             type=ref,event=branch,priority=600
#             type=ref,event=pr,priority=600
#             type=raw,value=latest,enable={{is_default_branch}},priority=200
#           labels: |
#             org.opencontainers.image.title=${{ github.repository }}
#             org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
#             org.opencontainers.image.revision=${{ github.sha }}
#             org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
#             # Configuration pour image priv√©e
#             org.opencontainers.image.visibility=private
  
#       # Build Docker image SEULEMENT (sans push)
#       - name: Build Docker image locally
#         id: build
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           push: false  # ‚úÖ Pas de push dans ce job
#           load: true   # ‚úÖ Charge l'image localement pour le scan suivant
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
      
#       #  Sauvegarde de l'image pour le job suivant
#       - name: Save Docker image as artifact
#         run: |
#           echo "üíæ Sauvegarde de l'image pour le job de scan..."
#           # Sauvegarder la premi√®re tag comme r√©f√©rence
#           FIRST_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
#           docker save "$FIRST_TAG" | gzip > docker-image.tar.gz
#           echo "‚úÖ Image sauvegard√©e: docker-image.tar.gz"
      
#       - name: Upload image artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: docker-image-${{ github.run_id }}
#           path: docker-image.tar.gz
#           retention-days: 1
  
#       # Affichage des informations de build
#       - name: Display build information
#         run: |
#           echo "üéâ === BUILD TERMIN√â AVEC SUCC√àS ==="
#           echo ""
#           echo " Nom de l'image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
#           echo " Digest (temporaire): ${{ steps.build.outputs.digest }}"
#           echo ""
#           echo " Tags pr√©par√©s:"
#           echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | while read tag; do echo "  - $tag"; done

       
#   # JOB PUSH - Publication de l'image Docker  
#   push-image:
#     name: Push - Docker Image Publication
#     runs-on: ubuntu-latest
#     needs: [build-image]
    
#     permissions:
#       contents: read
#       packages: write
#       actions: read
      
#     outputs:
#       image_name: ${{ needs.build-image.outputs.image_name }}
#       digest: ${{ steps.push.outputs.digest }}  
#       image_uri: ${{ needs.build-image.outputs.image_name }}@${{ steps.push.outputs.digest }}
#       tags: ${{ needs.build-image.outputs.tags }}
      
#     steps:
#       # R√©cup√©ration du code source
#       - name: Checkout repository
#         uses: actions/checkout@v4
      
#       # Authentification au GitHub Container Registry
#       - name: Login to Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}    
      
#       # Reconstruction et Push (n√©cessaire pour obtenir le vrai digest)
#       - name: Extract metadata (for push)
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#           tags: |
#             type=sha,prefix={{branch}}-,format=long,priority=1000
#             type=sha,prefix={{branch}}-,format=short,priority=900
#             type=ref,event=branch,priority=600
#             type=ref,event=pr,priority=600
#             type=raw,value=latest,enable={{is_default_branch}},priority=200
#           labels: |
#             org.opencontainers.image.title=${{ github.repository }}
#             org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
#             org.opencontainers.image.revision=${{ github.sha }}
#             org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
#             org.opencontainers.image.visibility=private
      
#       # Build final et Push pour obtenir le digest d√©finitif
#       - name: Build and push Docker image
#         id: push
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           push: true  #  Push final
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
  
#       # Configuration de l'image comme priv√©e
#       - name: Set image visibility to private
#         run: |
#           echo "Configuration de l'image comme priv√©e..."
#           echo "Image sera automatiquement configur√©e comme priv√©e"
      
#       # Affichage des informations finales
#       - name: Display complete build information
#         run: |
#           echo " === PUSH TERMIN√â AVEC SUCC√àS ==="
#           echo ""
#           echo " Nom de l'image: ${{ needs.build-image.outputs.image_name }}"
#           echo " SHA Digest FINAL: ${{ steps.push.outputs.digest }}"
#           echo " URI compl√®te (immutable): ${{ needs.build-image.outputs.image_name }}@${{ steps.push.outputs.digest }}"
#           echo ""
#           echo " Tags disponibles:"
#           echo "${{ needs.build-image.outputs.tags }}" | tr ',' '\n' | while read tag; do echo "  - $tag"; done
#           echo ""
#           echo " Visibilit√©: Image priv√©e (authentification requise)"
#           echo " Recommandation: Utilisez le SHA digest pour la production"
#           echo ""
#           echo " S√©curit√©: ${{ needs.container-scan.outputs.critical_count }} critical, ${{ needs.container-scan.outputs.high_count }} high vulnerabilities"
#           echo ""
#           echo " Commandes utiles:"
#           echo "  - Pull: docker pull ${{ needs.build-image.outputs.image_name }}@${{ steps.push.outputs.digest }}"
#           echo "  - Inspect: docker inspect ${{ needs.build-image.outputs.image_name }}@${{ steps.push.outputs.digest }}"
  
